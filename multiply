class Solution {
public:
    //字符串相加
    string addStrings(string num1, string num2) {
        string ret;
        //遍历两个字符串
        int end1 = num1.size()-1,end2 = num2.size()-1;
        int flag = 0;//进位标志
        while(end1 >= 0 || end2 >= 0)
        {
            int n1 = 0,n2 = 0;
            //如果字符串num1还没有遍历结束，将当前字符转换成整数
            if(end1 >= 0)
            {
                n1 = num1[end1] - '0';
                end1--;
            }
            //如果字符串num2还没有遍历结束，将当前字符转换成整数
            if(end2 >= 0)
            {
                n2 = num2[end2] - '0';
                end2--;
            }
            //将相加的十进制数的个位进行拼接，（产生的进位下一次计算）
            ret += (n1+n2+flag)%10 + '0';
            //判断是否进位
            if(n1 + n2 + flag > 9)
                flag = 1;//进位
            else
                flag = 0;//不产生进位
        }
        //判断最后还有没有进位
        if(flag == 1)
            ret += (flag+'0');
        //相加后的字符串是逆序的，需要进行逆置
        string::iterator begin = ret.begin();
        string::iterator end = ret.end();
        reverse(begin,end);
        return ret;
    }
    string multiply(string num1, string num2) {
        if(num1.size() <= 0 || num2.size() <= 0)
            return "0";
        if(num1[0] == '0' || num2[0] == '0')
            return "0";
        //模拟竖式乘法，乘数的每一位乘上被乘数，在相加
        string ret,s1;
        int end2 = num2.size()-1;
        int end1 = num1.size()-1;
        int num = 0;
        while(end2 >= 0)
        {
            int flag = 0;
            s1 = "\0";
            end1 = num1.size()-1;
            //用num2的每一位都跟num1相乘，结果再相加
            while(end1 >= 0)
            {
                int n1 = num1[end1]-'0';
                int n2 = num2[end2]-'0';
                s1 += (n1*n2 + flag)%10 + '0';
                //判断是否有进位
                if(n1 * n2 + flag > 9)
                    flag = (n1 * n2 + flag)/10;
                else
                    flag = 0;
                end1--;
            }
            if(flag != 0)
                s1 += flag + '0';
            //逆置s1
            string::iterator begin = s1.begin();
            string::iterator end = s1.end();
            reverse(begin,end);
            //判断s1后边需要补几个0
            for(int i = 0;i < num;i++)
                s1 += '0';
            //将s1加入ret中
            ret = addStrings(ret,s1);
            num++;
            end2--;
        }
        return ret;
    }
};
