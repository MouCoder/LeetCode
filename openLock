class Solution {
public:
    struct Node
    {
        string str;
        int count;
    };
    int openLock(vector<string>& deadends, string target) {
        //将死亡数字保存在unordered_Set中
        unordered_set<string> hashSet;
        for(auto e:deadends)
            hashSet.insert(e);
        //判断“0000”是否为死锁
        if(hashSet.find("0000") != hashSet.end())
            return -1;
        if(target == "0000")
            return 0;
        //使用hashmap保存所有的中间节点
        unordered_map<string,int> hashMap;
        //定义并初始化队列
        queue<struct Node> qu;
        struct Node newNode = {"0000",0};
        qu.push(newNode);
        int flag = 1;
        int ret = -1;
        int list[2] = {1,-1};
        while(!qu.empty() && flag)
        {
            //每一个字符串的四位替换成0~9进行查找，判断是否会出现target
            string str = qu.front().str;
            for(int i = 0;i < 4 && flag;i++)
            {
                for(int j = 0;j < 2;j++)
                {
                        string tmp = str;
                        int n = (tmp[i]-'0'+10+list[j])%10;
                        tmp[i] = n+'0';
                        if(hashSet.find(tmp) != hashSet.end())
                        {
                            //死锁
                            continue;
                        }
                        else if(hashMap.find(tmp) == hashMap.end())
                        {
                            //这个没有被使用过
                            hashMap[tmp] = 0;
                            newNode = {tmp,qu.front().count+1};
                            qu.push(newNode);
                            if(tmp == target)
                            {
                                flag = 0;
                                ret = qu.back().count;
                                break;
                            }
                        }
                }
            }
            qu.pop();
        }
        return ret;
    }
};
