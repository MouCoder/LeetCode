public:
    struct Node
    {
        int x;
        int y;
        int num;
    };
    int _orangesRotting(vector<vector<int>>&grid)
    {
        int ret = 0;
        //定义并初始化队列
        queue<Node> qu;
        //找出所有腐烂的橘子加入队列中
        for(int i = 0;i < grid.size();i++)
        {
            for(int j = 0;j < grid[0].size();j++)
            {
                if(grid[i][j] == 2)
                {
                    Node newNode = {i,j,0};
                    qu.push(newNode);
                }
            }
        }
        //四个方向
        int direction[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
        while(!qu.empty())
        {
            //带入四个方向
            for(int i = 0;i < 4;i++)
            {
                int nx = qu.front().x + direction[i][0];
                int ny = qu.front().y + direction[i][1];
                //判断新的位置是否合法
                if(nx < 0 || nx >= grid.size() || ny < 0 || ny >= grid[0].size())
                    continue;
                //该位置是新鲜橘子
                if(grid[nx][ny] == 1)
                {
                    Node newNode = {nx,ny,qu.front().num+1};
                    grid[nx][ny] = 2;
                    qu.push(newNode);
                    ret  = qu.back().num;
                }              
            }
            qu.pop();
        }
        return ret;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        if(grid.empty())
            return -1;
        //判断是否有腐烂的橘子
        int sr = -1,sc = -1;
        for(int i = 0;i < grid.size();i++)
        {
            for(int j = 0;j < grid[0].size();j++)
            {
                if(grid[i][j] == 2)
                {
                    sr = i;
                    sc = j;
                    break;
                }
            }
        }
        if(sr == -1 && sc == -1)
        {
            //如果没有橘子返回0，否则返回-1
            for(int i = 0;i < grid.size();i++)
            {
                for(int j = 0;j < grid[0].size();j++)
                {
                    if(grid[i][j] != 0)
                        return -1;
                }
            }
            return 0;
        }
        //广度优先搜索找最优解
        int ret = _orangesRotting(grid);
        //判断是否没有好橘子
        for(int i = 0;i < grid.size();i++)
        {
            for(int j = 0;j < grid[0].size();j++)
            {
                if(grid[i][j] == 1)
                    return -1;
            }
        }
        return ret;
    }
};
