class Solution {
public:
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @param V: Given n items with value V[i]
     * @return: The maximum value
     */
    int backPackII(int m, vector<int> &A, vector<int> &V) {
        int len = A.size();
        vector<int> status(m+1,0);//保存状态,初始状态：当放入背包的物品为0时总价值为0
        vector<int> ret(m+1,0);//返回结果：ret[m]
        //状态之间的转换：f(i,j) = max{f(i-1,j),f(i-1,j-A[i-1])+V[i-1]}
        for(int i = 1;i <= len;i++)
        {
            for(int j = 1;j <= m;j++)
            {
                if(A[i-1] > j)
                    ret[j] = status[j];
                else
                    ret[j] = max(status[j],status[j-A[i-1]]+V[i-1]);
            }
            //更新状态
            status = ret;//将ret保存在status中（ret的大小会变成0）
            if(i != len-1)
                ret.resize(m+1,0);//重新对ret初始化
        }
        return ret[m];
    }
};
