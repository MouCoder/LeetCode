struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    //当其中一个链表为NULL或者为0直接返回另一个链表
    //注意：条件语句中的条件不能调换顺序，否则可能会出现空指针异常
    if(l1 == NULL || (l1->val == 0 && l1->next == NULL))
        return l2;
    else if(l2 == NULL || (l2->val == 0 && l2->next == NULL))
        return l1;
    //所给链表都不是空链表或者为0的链表，则将两个链表相加。
    //新链表的头节点，不存放数据
    struct ListNode* newHead = (struct ListNode*)malloc(sizeof(struct ListNode));
    newHead->next = NULL;
    struct ListNode* tail = newHead;
    //进位标志位
    int flag = 0;
    while(l1 && l2)
    {
        //开辟新节点，存储相加后的数据
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        if(l1->val + l2->val + flag <= 9)
        {
            newNode->val = l1->val + l2->val + flag;
            flag = 0;
        }
        else
        {
            newNode->val = (l1->val + l2->val + flag)%10;
            flag = 1;
        }
        newNode->next = NULL;
        tail->next = newNode;
        tail = tail->next;
        l1 = l1->next;
        l2 = l2->next;
    }
    while(l1)
    {
        //开辟新节点，存储相加后的数据
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        if(flag + l1->val <= 9)
        {
            newNode->val = flag + l1->val;
            flag = 0;
        }
        else
        {
            newNode->val = (l1->val + flag)%10;
            flag = 1;
        }
        newNode->next = NULL;
        tail->next = newNode;
        tail = tail->next;
        l1 = l1->next;
    }
    while(l2)
    {
        //开辟新节点，存储相加后的数据
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        if(flag + l2->val <= 9)
        {
            newNode->val = flag + l2->val;
            flag = 0;
        }
        else
        {
            newNode->val = (l2->val + flag)%10;
            flag = 1;
        }
        newNode->next = NULL;
        tail->next = newNode;
        tail = tail->next;
        l2 = l2->next;
    }
    if(flag == 1)
    {
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = 1;
        newNode->next = NULL;
        tail->next = newNode;
    }
    return newHead->next;
}
