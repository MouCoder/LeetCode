class Solution {
public:
    /**
     * 
     * @param obstacleGrid int整型vector<vector<>> 
     * @return int整型
     */
    int uniquePathsWithObstacles(vector<vector<int> >& obstacleGrid) {
        int row = obstacleGrid.size();//行
        int col = obstacleGrid[0].size();//列
        if(obstacleGrid[row-1][col-1] == 1 || obstacleGrid[0][0] == 1)
            return 0;
        vector<vector<int>> status(row);//保存状态
        //初始化状态status[0][0] = 1
        for(int i = 0;i < row;i++)
        {
            vector<int> tmp(col,1);
            status[i] = tmp;
        }
        //状态之间的转移方程
        for(int i = 0;i < row;i++)
        {
            for(int j = 0;j < col;j++)
            {
                if((i != 0 || j != 0) && obstacleGrid[i][j] != 1)
                {
                    if(j == 0)
                    {
                        if(obstacleGrid[i-1][j] != 1)
                            status[i][j] = status[i-1][j];
                        else
                            obstacleGrid[i][j] = 1;
                    }
                    else if(i == 0)
                    {
                        if(obstacleGrid[i][j-1] != 1)
                            status[i][j] = status[i][j-1];
                        else
                            obstacleGrid[i][j] = 1;
                    }
                    else
                    {
                        if(obstacleGrid[i-1][j] != 1 && obstacleGrid[i][j-1] == 1)
                            status[i][j] = status[i-1][j];
                        else if(obstacleGrid[i-1][j] == 1 && obstacleGrid[i][j-1] != 1)
                            status[i][j] = status[i][j-1];
                        else if(obstacleGrid[i-1][j] != 1 && obstacleGrid[i][j-1] != 1)
                            status[i][j] = status[i-1][j] + status[i][j-1];
                        else
                            obstacleGrid[i][j] = 1;
                    }
                }
            }
        }
        return status[row-1][col-1];
    }
};
