class Solution {
public:
    void _solve(vector<vector<char>>& board,int sr,int sc)
    {
        //终止条件：不是O或者位置非法
        if(sr < 0 || sr >= board.size() || sc < 0 || sc >= board[0].size())
            return;
        if(board[sr][sc] != 'O')
            return;
        //变成Y是O进行扩散
        board[sr][sc] = 'Y';
        _solve(board,sr-1,sc);
        _solve(board,sr+1,sc);
        _solve(board,sr,sc-1);
        _solve(board,sr,sc+1);
    }
    void solve(vector<vector<char>>& board) {
        //把边界或与边界相连的o变成Y
        //找出一个边界上的o
        //第一行
        for(int i = 0;i < board[0].size();i++)
        {
            if(board[0][i] == 'O')
            {
                _solve(board,0,i);
            }
        }
        //第一列
        for(int i = 0;i < board.size();i++)
        {
            if(board[i][0] == 'O')
            {
                _solve(board,i,0);
            }
        }
        //最后一行
        for(int i = 0;i < board[0].size();i++)
        {
            if(board[board.size()-1][i] == 'O')
            {
                _solve(board,board.size()-1,i);
            }
        }
        //最后一列
        for(int i = 0;i < board.size();i++)
        {
            if(board[i][board[0].size()-1] == 'O')
            {
                _solve(board,i,board[0].size()-1);
            }
        }
        //将所有的O变成x
        for(int i = 1;i < board.size()-1;i++)
        {
            for(int j = 1;j < board[0].size()-1;j++)
            {
                if(board[i][j] == 'O')
                    board[i][j] = 'X';
            }
        }
        //将所有的Y变成O
        for(int i = 0;i < board.size();i++)
        {
            for(int j = 0;j < board[0].size();j++)
            {
                if(board[i][j] == 'Y')
                    board[i][j] = 'O';
            }
        }
    }
};
