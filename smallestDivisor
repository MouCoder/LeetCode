class Solution {
public:
    //求出数组中元素除以divid的和并返回
    int midDivNums(vector<int> nums,int numsSize,int divied)
    {
        int sum = 0;
        for(int i = 0;i < numsSize;i++)
        {
            if(nums[i]%divied == 0)
            {
                sum += nums[i]/divied;
            }
            else
            {
                sum += nums[i]/divied;
                sum++;
            }
        }
        return sum;
    }
    int smallestDivisor(vector<int>& nums, int threshold) {
        //目标值ret应该在[1,maxValue],使用二分查找确定最小的ret
        int ret = 1;
        //找出数组中的最大值maxValue
        int maxValue = nums[0];
        int size = nums.size();
        for(int i = 0;i < size;i++)
        {
            if(nums[i] > maxValue)
                maxValue = nums[i];
        }  
        //二分查找确定最小的ret
        int begin = 1,end = maxValue,mid;
        while(begin <= end)
        {
            mid = (begin+end)/2;
            //计算出mid做除数时的总和sum
            int sum = midDivNums(nums,size,mid);
            //如果sum小于threshold，判断divied是否可以更小
            if(sum > threshold)
            {
                begin = mid+1;
            }
            else if(sum <= threshold)
            {
                if(mid == 1 || midDivNums(nums,size,mid-1) > threshold)
                {
                    ret = mid;
                    break;
                }
                else
                {
                    end = mid-1;
                }
            }
        }
        return ret;
    }
};
