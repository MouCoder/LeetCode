class Solution {
public:
    void dfs(vector<vector<int>>& ret,vector<int>& candidates,vector<int> cur,int index,int target)
    {
        //终止条件---index >= candidates.size()
        if(index >= candidates.size())
            return;
        //满足条件
        if(target == 0)
        {
            ret.push_back(cur);
            return;
        }
        //直接跳过
        dfs(ret,candidates,cur,index+1,target);
        //回溯，当前值
        if(target - candidates[index] >= 0)
        {
            cur.push_back(candidates[index]);
            dfs(ret,candidates,cur,index,target-candidates[index]);
            cur.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ret;
        vector<int> cur;
        dfs(ret,candidates,cur,0,target);
        return ret;
    }
};
