class Solution {
public:
    void backtrack(string& str,vector<string>& ret,const string& digits,const vector<string>& AlphanumericMap,int index)
    {
        //深度遍历，如果搜索到最后了则加入ret
        if(index == digits.size())
            ret.push_back(str);
        else
        {
            for(auto e : AlphanumericMap[digits[index]-'0'-2])
            {
                str += e;
                backtrack(str,ret,digits,AlphanumericMap,index+1);
                str.pop_back();
            }
        }
    }
    vector<string> letterCombinations(string digits) {
        vector<string> ret;
        if(digits.empty())
            return ret;
        //建立数字-字母的映射关系
        vector<string> AlphanumericMap;
        AlphanumericMap.push_back("abc");
        AlphanumericMap.push_back("def");
        AlphanumericMap.push_back("ghi");
        AlphanumericMap.push_back("jkl");
        AlphanumericMap.push_back("mno");
        AlphanumericMap.push_back("pqrs");
        AlphanumericMap.push_back("tuv");
        AlphanumericMap.push_back("wxyz");
        //进行深度搜索
        string str;
        backtrack(str,ret,digits,AlphanumericMap,0);
        return ret;
    } 
};
