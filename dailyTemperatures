class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& T) {
        //定义一个栈,用于存储T的下标
        stack<int> mystack;
        vector<int> ret(T.size(),0);
        //当将要入栈的元素比栈顶元素大时，用该元素的下标减去栈顶元素的下标就是天数
        for(int i = 0;i < T.size();i++)
        {
            if(mystack.empty())
                mystack.push(i);
            else if(T[mystack.top()] < T[i])
            {
                //找到最近一个比他大的
                ret[mystack.top()] = i - mystack.top();
                mystack.pop();
                i--;
            }
            else if(T[mystack.top()] >= T[i])
                mystack.push(i);
        }
        //栈中剩余元素的的等待天数应该都是0
        while(!mystack.empty())
        {
            ret[mystack.top()] = 0;
            mystack.pop();
        }
        return ret;
    }
};
