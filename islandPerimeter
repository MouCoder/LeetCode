class Solution {
public:
    void _islandPerimeter(vector<vector<int>>& grid,int sr,int sc,int& ret)
    {
        //终止条件：不是陆地或者位置非法
        //判断周长加多少并继续递归
        //判断上边是否为陆地
        grid[sr][sc] = -1;
        if((sr-1 >= 0 && sr-1 < grid.size()) && grid[sr-1][sc] == 1)
        {
            //上边是陆地，递归否则+1
            _islandPerimeter(grid,sr-1,sc,ret);
        }
        else if((sr-1 < 0 || sr-1 >= grid.size()) ||grid[sr-1][sc] != -1)
        {
            ret += 1;
        }
        //下
        if(sr+1 >= 0 && sr+1 < grid.size() && grid[sr+1][sc] == 1)
        {
            _islandPerimeter(grid,sr+1,sc,ret);
        }
        else if((sr+1 < 0 || sr+1 >= grid.size()) || grid[sr+1][sc] != -1)
        {
            ret += 1;
        }
        //左
        if(sc-1 >= 0 && sc-1 < grid[0].size() && grid[sr][sc-1] == 1)
        {
            _islandPerimeter(grid,sr,sc-1,ret);
        }
        else if((sc-1 < 0 || sc-1 >= grid[0].size()) || grid[sr][sc-1] != -1)
        {
            ret += 1;
        }
        //右
        if(sc+1 >= 0 && sc+1 < grid[0].size() && grid[sr][sc+1] == 1)
        {
            _islandPerimeter(grid,sr,sc+1,ret);
        }
        else if((sc+1 < 0 || sc+1 >= grid[0].size()) || grid[sr][sc+1] != -1)
        {
            ret += 1;
        }
    }
    int islandPerimeter(vector<vector<int>>& grid) {
        //找到一块陆地
        int row = grid.size();
        int col = grid[0].size();
        for(int i = 0;i < row;i++)
        {
            for(int j = 0;j < col;j++)
            {
                if(grid[i][j] == 1)
                {
                    //陆地
                    row = i;
                    col = j;
                    break;
                }
            }
        } 
        int ret = 0;
        //以找到的第一块陆地为中心，向四周发散查找
        _islandPerimeter(grid,row,col,ret);
        return ret;
    }
};
