class Solution {
public:
    TreeNode* FlipBinaryTree(TreeNode* root)
    {
        if(root == nullptr)
            return root;
        TreeNode* tmp = root->left;
        root->left = FlipBinaryTree(root->right);
        root->right = FlipBinaryTree(tmp);
        return root;
    }
    bool sameTree(TreeNode* A,TreeNode* B)
    {
        if(A == nullptr && B != nullptr)
            return false;
        if(B == nullptr && A != nullptr)
            return false;
        if(A == nullptr && B == nullptr)
            return true;
        if(A->val != B->val)
            return false;
        return sameTree(A->left,B->left) && sameTree(A->right,B->right);
    }
    bool isSymmetric(TreeNode* root) {
        //递归，将二叉树的左子树进行翻转判断与右子树是否相同
        if(root == nullptr)
            return true;
        root->left = FlipBinaryTree(root->left);
 
        return sameTree(root->left,root->right);
    }
};
