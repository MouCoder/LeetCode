class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        //遍历链表，将链表元素存入数组中
        vector<int> list;
        int length = 0;//链表长度
        while(head != NULL)
        {
            list.push_back(head->val);
            length++;
            head = head->next;
        }
        vector<int> ret(length,0);
        stack<int> mystack;
        //遍历链表数组，并压栈
        //入栈条件：栈为空或者以栈顶元素为下标的数组元素大于入栈元素，将其下标入栈
        //出栈条件：以栈顶元素为下标的数组元素小于入栈元素，栈顶元素出栈，入栈元素继续与新的栈顶元素比较
        for(int i = 0;i < length;i++)
        {
            if(mystack.empty() || list[mystack.top()] >= list[i])
                mystack.push(i);
            else
            {
                //将栈顶元素为下标的位置赋值为list[i]
                ret[mystack.top()] = list[i];
                //栈顶元素出栈
                mystack.pop();
                //继续与新的栈顶元素进行比较
                i--;
            }
        }
        return ret;
    }
};
