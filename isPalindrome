class Solution {
public:
    /**
     * 
     * @param s string字符串 
     * @return int整型
     */
    bool isPalindrome(string& s,int beginIndex,int endIndex)
    {
        while(beginIndex < endIndex)
        {
            if(s[beginIndex] == s[endIndex])
            {
                beginIndex++;
                endIndex--;
            }
            else
                return false;
        }
        return true;
    }
    int minCut(string s) {
        int len = s.size();
        vector<int> minCutI(len+1,0);//保存状态,初始状态f(1) = 0;
        for(int i = 2;i <= len;i++)
        {
            //先判断[1,i]整体是否是回文串
            if(isPalindrome(s,0,i-1))
            {
                minCutI[i] = 0;
            }
            else
            {
                //判断j,i是否为回文串的最小分割次数
                int min = i-1;
                for(int j = 2;j <= i;j++)
                {
                    if(isPalindrome(s,j-1,i-1))
                    {
                        if(minCutI[j-1]+1 < min)
                            min = minCutI[j-1]+1;
                    }
                }
                minCutI[i] = min;
            }
        }
        return minCutI[len];
    }
};
